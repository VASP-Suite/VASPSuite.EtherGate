// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VASPSuite.EtherGate.Features.ValueObjects.Address
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("EIP-55 compliance")]
    public partial class EIP_55ComplianceFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "EIP55Compliance.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ValueObjects/Address", "EIP-55 compliance", "  As a developer\n  I want to minimize the risks\n  That I am working with a wrong " +
                    "Ethereum address", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsing valid Ethereum address")]
        [NUnit.Framework.TestCaseAttribute("0x52908400098527886E0F7030069857D2E4169EE7", "0x52908400098527886e0f7030069857d2e4169ee7", null)]
        [NUnit.Framework.TestCaseAttribute("0x8617E340B3D01FA5F11F306F4090FD50E238070D", "0x8617e340b3d01fa5f11f306f4090fd50e238070d", null)]
        [NUnit.Framework.TestCaseAttribute("0xde709f2102306220921060314715629080e2fb77", "0xde709f2102306220921060314715629080e2fb77", null)]
        [NUnit.Framework.TestCaseAttribute("0x27b1fdb04752bbc536007a920d24acb045561c26", "0x27b1fdb04752bbc536007a920d24acb045561c26", null)]
        [NUnit.Framework.TestCaseAttribute("0x5aAeb6053F3E94C9b9A09f33669435E7Ef1BeAed", "0x5aaeb6053f3e94c9b9a09f33669435e7ef1beaed", null)]
        [NUnit.Framework.TestCaseAttribute("0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359", "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359", null)]
        [NUnit.Framework.TestCaseAttribute("0xdbF03B407c01E7cD3CBea99509d93f8DDDC8C6FB", "0xdbf03b407c01e7cd3cbea99509d93f8dddc8c6fb", null)]
        [NUnit.Framework.TestCaseAttribute("0xD1220A0cf47c7B9Be7A2E6BA89F429762e7b9aDb", "0xd1220a0cf47c7b9be7a2e6ba89f429762e7b9adb", null)]
        public virtual void ParsingValidEthereumAddress(string addressString, string addressBytes, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("addressString", addressString);
            argumentsOfScenario.Add("addressBytes", addressBytes);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parsing valid Ethereum address", null, tagsOfScenario, argumentsOfScenario);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.When(string.Format("I call Parse method of the Address struct with a following parameter: \"{0}\"", addressString), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
    testRunner.Then(string.Format("the Address.Parse call result should be \"{0}\"", addressBytes), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsing invalid Ethereum address")]
        [NUnit.Framework.TestCaseAttribute("0x52908400098527886e0F7030069857D2E4169EE7", null)]
        [NUnit.Framework.TestCaseAttribute("0x8617e340B3D01FA5F11F306F4090FD50E238070D", null)]
        [NUnit.Framework.TestCaseAttribute("0xdE709f2102306220921060314715629080e2fb77", null)]
        [NUnit.Framework.TestCaseAttribute("0x27B1fdb04752bbc536007a920d24acb045561c26", null)]
        [NUnit.Framework.TestCaseAttribute("0x5AAeb6053F3E94C9b9A09f33669435E7Ef1BeAed", null)]
        [NUnit.Framework.TestCaseAttribute("0xFB6916095ca1df60bB79Ce92cE3Ea74c37c5d359", null)]
        [NUnit.Framework.TestCaseAttribute("0xDbF03B407c01E7cD3CBea99509d93f8DDDC8C6FB", null)]
        [NUnit.Framework.TestCaseAttribute("0xd1220A0cf47c7B9Be7A2E6BA89F429762e7b9aDb", null)]
        public virtual void ParsingInvalidEthereumAddress(string addressString, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("addressString", addressString);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parsing invalid Ethereum address", null, tagsOfScenario, argumentsOfScenario);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
    testRunner.When(string.Format("I call Parse method of the Address struct with a following parameter: \"{0}\"", addressString), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
    testRunner.Then("a FormatException will be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Converting an Ethereum address to a string")]
        [NUnit.Framework.TestCaseAttribute("0x52908400098527886e0f7030069857d2e4169ee7", "true", "0x52908400098527886E0F7030069857D2E4169EE7", null)]
        [NUnit.Framework.TestCaseAttribute("0x52908400098527886e0f7030069857d2e4169ee7", "false", "0x52908400098527886e0f7030069857d2e4169ee7", null)]
        [NUnit.Framework.TestCaseAttribute("0x8617e340b3d01fa5f11f306f4090fd50e238070d", "true", "0x8617E340B3D01FA5F11F306F4090FD50E238070D", null)]
        [NUnit.Framework.TestCaseAttribute("0x8617e340b3d01fa5f11f306f4090fd50e238070d", "false", "0x8617e340b3d01fa5f11f306f4090fd50e238070d", null)]
        [NUnit.Framework.TestCaseAttribute("0xde709f2102306220921060314715629080e2fb77", "true", "0xde709f2102306220921060314715629080e2fb77", null)]
        [NUnit.Framework.TestCaseAttribute("0xde709f2102306220921060314715629080e2fb77", "false", "0xde709f2102306220921060314715629080e2fb77", null)]
        [NUnit.Framework.TestCaseAttribute("0x27b1fdb04752bbc536007a920d24acb045561c26", "true", "0x27b1fdb04752bbc536007a920d24acb045561c26", null)]
        [NUnit.Framework.TestCaseAttribute("0x27b1fdb04752bbc536007a920d24acb045561c26", "false", "0x27b1fdb04752bbc536007a920d24acb045561c26", null)]
        [NUnit.Framework.TestCaseAttribute("0x5aaeb6053f3e94c9b9a09f33669435e7ef1beaed", "true", "0x5aAeb6053F3E94C9b9A09f33669435E7Ef1BeAed", null)]
        [NUnit.Framework.TestCaseAttribute("0x5aaeb6053f3e94c9b9a09f33669435e7ef1beaed", "false", "0x5aaeb6053f3e94c9b9a09f33669435e7ef1beaed", null)]
        [NUnit.Framework.TestCaseAttribute("0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359", "true", "0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359", null)]
        [NUnit.Framework.TestCaseAttribute("0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359", "false", "0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359", null)]
        [NUnit.Framework.TestCaseAttribute("0xdbf03b407c01e7cd3cbea99509d93f8dddc8c6fb", "true", "0xdbF03B407c01E7cD3CBea99509d93f8DDDC8C6FB", null)]
        [NUnit.Framework.TestCaseAttribute("0xdbf03b407c01e7cd3cbea99509d93f8dddc8c6fb", "false", "0xdbf03b407c01e7cd3cbea99509d93f8dddc8c6fb", null)]
        [NUnit.Framework.TestCaseAttribute("0xd1220a0cf47c7b9be7a2e6ba89f429762e7b9adb", "true", "0xD1220A0cf47c7B9Be7A2E6BA89F429762e7b9aDb", null)]
        [NUnit.Framework.TestCaseAttribute("0xd1220a0cf47c7b9be7a2e6ba89f429762e7b9adb", "false", "0xd1220a0cf47c7b9be7a2e6ba89f429762e7b9adb", null)]
        public virtual void ConvertingAnEthereumAddressToAString(string addressBytes, string addChecksum, string addressString, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("addressBytes", addressBytes);
            argumentsOfScenario.Add("addChecksum", addChecksum);
            argumentsOfScenario.Add("addressString", addressString);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Converting an Ethereum address to a string", null, tagsOfScenario, argumentsOfScenario);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
    testRunner.When(string.Format("I call ToString method of an Address \"{0}\" with a following parameter: \"{1}\"", addressBytes, addChecksum), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
    testRunner.Then(string.Format("the ToString call result should be \"{0}\"", addressString), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
